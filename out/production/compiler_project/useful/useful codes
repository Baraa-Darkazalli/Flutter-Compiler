///* import statement */
//importStatement: IMPORT stringLiteral SEMICOLON;
//
///* variable declaration and initialization */
//varDeclaration: VAR IDENTIFIER (EQUAL expression)? SEMICOLON;
//finalDeclaration: FINAL IDENTIFIER (EQUAL expression)? SEMICOLON;
//constDeclaration: CONST IDENTIFIER (EQUAL expression)? SEMICOLON;
//
///* widget instantiation */
//widgetInstantiation: typeName (DOT IDENTIFIER)? PARENTHESES_OPEN constructorArguments? PARENTHESES_CLOSE (DOT IDENTIFIER)?;
//typeName: IDENTIFIER (DOT IDENTIFIER)*;
//
///* constructor arguments */
//constructorArguments: namedArgument | listLiteral | mapLiteral | expressionList;
//namedArgument: IDENTIFIER COLON expression;
//listLiteral: SQUARE_OPEN expressionList? SQUARE_CLOSE;
//mapLiteral: CURLY_OPEN mapLiteralEntry (COMMA mapLiteralEntry)* CURLY_CLOSE;
//mapLiteralEntry: stringLiteral COLON expression;
//
///* expressions */
//expressionList: expression (COMMA expression)*;
//expression: logicalExpression;
//logicalExpression: equalityExpression ((AND | OR) equalityExpression)*;
//equalityExpression: relationalExpression ((EQUAL_EQUAL | NOT_EQUAL) relationalExpression)*;
//relationalExpression: additiveExpression ((SMALLER | LARGER | SMALLER_OR_EQUAL | LARGER_OR_EQUAL) additiveExpression)*;
//additiveExpression: multiplicativeExpression ((PLUS | MINUS) multiplicativeExpression)*;
//multiplicativeExpression: unaryExpression ((MULTIPLY | DIVISION | MOD) unaryExpression)*;
//unaryExpression: (NOT | MINUS)? primaryExpression;
//primaryExpression: IDENTIFIER | numberLiteral | stringLiteral | booleanLiteral | PARENTHESES_OPEN expression PARENTHESES_CLOSE;
//numberLiteral: INT | DOUBLE;
//stringLiteral: DOUBLE_QUOTE ~DOUBLE_QUOTE* DOUBLE_QUOTE | DOUBLE_QUOTE ~DOUBLE_QUOTE* DOUBLE_QUOTE;
//booleanLiteral: TRUE | FALSE;
